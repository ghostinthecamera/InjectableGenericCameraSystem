Control
=========

// inputManager getInstance:
// input_rmdwin10_f.input::InputManager::getInstance()
input_rmdwin10_f.dll+1140 - 48 8B 05 49460100     - mov rax,[input_rmdwin10_f.dll+15790] { (2001A9DF970) }
input_rmdwin10_f.dll+1147 - C3                    - ret 
input_rmdwin10_f.dll+1148 - CC                    - int 3 

// pass 1 as bool to enable camera
//input_rmdwin10_f.input::InputManager::setFreeCameraWithoutPlayerControls(inputManager*, bool)
input_rmdwin10_f.dll+8850 - 88 91 8B000000        - mov [rcx+0000008B],dl
input_rmdwin10_f.dll+8856 - C3                    - ret 
input_rmdwin10_f.dll+8857 - CC                    - int 3 

// enable free camera in main game:
// Search for 'Free camera' in string references. 
// Latest patch
Control_DX12.exe+3454E0 - 48 8D 4D E0           - lea rcx,[rbp-20]
Control_DX12.exe+3454E4 - FF 15 9EDC9D00        - call qword ptr [Control_DX12.exe+D23188] { ->physics_rmdwin10_f.physics::updateApexCamera }
Control_DX12.exe+3454EA - 48 63 0D B3CBE700     - movsxd  rcx,dword ptr [Control_DX12.exe+11C20A4] { (0) }
Control_DX12.exe+3454F1 - 48 8D 15 982DA500     - lea rdx,[Control_DX12.exe+D98290] { ("Current camera") }
Control_DX12.exe+3454F8 - 48 8B 0C CF           - mov rcx,[rdi+rcx*8]
Control_DX12.exe+3454FC - E8 CF0D0000           - call Control_DX12.exe+3462D0
Control_DX12.exe+345501 - 48 8D 15 782DA500     - lea rdx,[Control_DX12.exe+D98280] { ("Free camera") }
Control_DX12.exe+345508 - 48 8B 0D A1CBE700     - mov rcx,[Control_DX12.exe+11C20B0] { (171AE0732B0) }
Control_DX12.exe+34550F - E8 BC0D0000           - call Control_DX12.exe+3462D0
Control_DX12.exe+345514 - 48 8D 15 552DA500     - lea rdx,[Control_DX12.exe+D98270] { ("Player camera") }
Control_DX12.exe+34551B - 48 8B 0D 36CBE700     - mov rcx,[Control_DX12.exe+11C2058] { (171AE27A1F0) }
Control_DX12.exe+345522 - E8 A90D0000           - call Control_DX12.exe+3462D0
Control_DX12.exe+345527 - 80 3D 0299E900 00     - cmp byte ptr [Control_DX12.exe+11DEE30],00 { (0),0 }

// October patch:
Control_DX12.exe+336340 - 48 8D 4D E0           - lea rcx,[rbp-20]
Control_DX12.exe+336344 - FF 15 26DE9C00        - call qword ptr [Control_DX12.exe+D04170] { ->physics_rmdwin10_f.physics::updateApexCamera }
Control_DX12.exe+33634A - 48 63 0D 2B22E600     - movsxd  rcx,dword ptr [Control_DX12.exe+119857C]		>>> Address for free camera: set to 1 to enable. DX11: Control_DX11.exe+33634A - 48 63 0D 8B21E600     - movsxd  rcx,dword ptr [Control_DX11.exe+11984DC] { (0) }
Control_DX12.exe+336351 - 48 8D 15 601BA400     - lea rdx,[Control_DX12.exe+D77EB8] { ("Current camera") }
Control_DX12.exe+336358 - 48 8B 0C CF           - mov rcx,[rdi+rcx*8]
Control_DX12.exe+33635C - E8 CF0D0000           - call Control_DX12.exe+337130
Control_DX12.exe+336361 - 48 8D 15 601BA400     - lea rdx,[Control_DX12.exe+D77EC8] { ("Free camera") }
Control_DX12.exe+336368 - 48 8B 0D 1922E600     - mov rcx,[Control_DX12.exe+1198588] { (1CEE89313B0) }
Control_DX12.exe+33636F - E8 BC0D0000           - call Control_DX12.exe+337130
Control_DX12.exe+336374 - 48 8D 15 0D1BA400     - lea rdx,[Control_DX12.exe+D77E88] { ("Player camera") }
Control_DX12.exe+33637B - 48 8B 0D B621E600     - mov rcx,[Control_DX12.exe+1198538] { (1CEE8B3AD30) }
Control_DX12.exe+336382 - E8 A90D0000           - call Control_DX12.exe+337130
Control_DX12.exe+336387 - 80 3D 52EEE700 00     - cmp byte ptr [Control_DX12.exe+11B51E0],00 { (0),0 }
Control_DX12.exe+33638E - 0F84 54010000         - je Control_DX12.exe+3364E8
Control_DX12.exe+336394 - 45 33 E4              - xor r12d,r12d
// RTM Game:
Control_DX12.exe+32777C - FF 15 6E599B00        - call qword ptr [Control_DX12.exe+CDD0F0] { ->physics_rmdwin10_f.physics::updateApexCamera }
Control_DX12.exe+327782 - 48 63 0D 8FF8E300     - movsxd  rcx,dword ptr [Control_DX12.exe+1167018]		>>> Address for free camera: set to 1 to enable. DX11: 1166F18
Control_DX12.exe+327789 - 48 8D 15 3089A200     - lea rdx,[Control_DX12.exe+D500C0] { ("Current camera") }
Control_DX12.exe+327790 - 48 8B 0C CF           - mov rcx,[rdi+rcx*8]
Control_DX12.exe+327794 - E8 370D0000           - call Control_DX12.exe+3284D0
Control_DX12.exe+327799 - 48 8D 15 D888A200     - lea rdx,[Control_DX12.exe+D50078] { ("Free camera") }
Control_DX12.exe+3277A0 - 48 8B 0D 89F8E300     - mov rcx,[Control_DX12.exe+1167030] { (200279193B0) }
Control_DX12.exe+3277A7 - E8 240D0000           - call Control_DX12.exe+3284D0
Control_DX12.exe+3277AC - 48 8D 15 D588A200     - lea rdx,[Control_DX12.exe+D50088] { ("Player camera") }
Control_DX12.exe+3277B3 - 48 8B 0D 36F8E300     - mov rcx,[Control_DX12.exe+1166FF0] { (20027B24A30) }
Control_DX12.exe+3277BA - E8 110D0000           - call Control_DX12.exe+3284D0
Control_DX12.exe+3277BF - 80 3D FABCE500 00     - cmp byte ptr [Control_DX12.exe+11834C0],00 { (0),0 }
Control_DX12.exe+3277C6 - 0F84 54010000         - je Control_DX12.exe+327920
Control_DX12.exe+3277CC - 45 33 E4              - xor r12d,r12d

// how to obtain the cameracomponentstate base address: 
// latest patch
Control_DX12.exe+55919B - 48 8B 44 24 30        - mov rax,[rsp+30]
Control_DX12.exe+5591A0 - C6 00 00              - mov byte ptr [rax],00 { 0 }
Control_DX12.exe+5591A3 - C7 46 60 00000000     - mov [rsi+60],00000000 { 0 }
Control_DX12.exe+5591AA - 48 63 05 F38EC600     - movsxd  rax,dword ptr [Control_DX12.exe+11C20A4] { (0) }
Control_DX12.exe+5591B1 - 48 8D 0D 486EAAFF     - lea rcx,[Control_DX12.exe] { (9460301) }
Control_DX12.exe+5591B8 - 48 8B 8C C1 A8201C01  - mov rcx,[rcx+rax*8+011C20A8]				<< hardcoded static address. 
Control_DX12.exe+5591C0 - 33 D2                 - xor edx,edx
Control_DX12.exe+5591C2 - 48 85 C9              - test rcx,rcx
Control_DX12.exe+5591C5 - 74 19                 - je Control_DX12.exe+5591E0
Control_DX12.exe+5591C7 - 48 8D 55 C7           - lea rdx,[rbp-39]
// October patch
Control_DX12.exe+548975 - 0F82 C7FEFFFF         - jb Control_DX12.exe+548842
Control_DX12.exe+54897B - 48 8B 44 24 30        - mov rax,[rsp+30]
Control_DX12.exe+548980 - C6 00 00              - mov byte ptr [rax],00 { 0 }
Control_DX12.exe+548983 - C7 46 60 00000000     - mov [rsi+60],00000000 { 0 }
Control_DX12.exe+54898A - 48 63 05 EBFBC400     - movsxd  rax,dword ptr [Control_DX12.exe+119857C] { (0) }
Control_DX12.exe+548991 - 48 8D 0D 6876ABFF     - lea rcx,[Control_DX12.exe]
Control_DX12.exe+548998 - 48 8B 8C C1 80851901  - mov rcx,[rcx+rax*8+01198580]				<< hardcoded static address. DX11: Control_DX11.exe+548978 - 48 8B 8C C1 E0841901  - mov rcx,[rcx+rax*8+011984E0]
Control_DX12.exe+5489A0 - 33 D2                 - xor edx,edx
Control_DX12.exe+5489A2 - 48 85 C9              - test rcx,rcx
Control_DX12.exe+5489A5 - 74 19                 - je Control_DX12.exe+5489C0
Control_DX12.exe+5489A7 - 48 8D 55 C7           - lea rdx,[rbp-39]
Control_DX12.exe+5489AB - FF 15 7FA77B00        - call qword ptr [Control_DX12.exe+D03130] { ->coregame_rmdwin10_f.coregame::CameraComponentState::getPosition }
// RTM Game
Control_DX12.exe+53804E - 0F82 C9FEFFFF         - jb Control_DX12.exe+537F1D
Control_DX12.exe+538054 - 48 8B 44 24 50        - mov rax,[rsp+50]
Control_DX12.exe+538059 - C6 00 00              - mov byte ptr [rax],00 { 0 }
Control_DX12.exe+53805C - 41 BE 08000000        - mov r14d,00000008 { 8 }
Control_DX12.exe+538062 - C7 87 90000000 00000000 - mov [rdi+00000090],00000000 { 0 }
Control_DX12.exe+53806C - 48 63 05 A5EFC200     - movsxd  rax,dword ptr [Control_DX12.exe+1167018] << is 1 if freecam is on, see above
Control_DX12.exe+538073 - 48 8D 35 867FACFF     - lea rsi,[Control_DX12.exe] { (9460301) }
Control_DX12.exe+53807A - 48 8B 8C C6 28701601  - mov rcx,[rsi+rax*8+01167028]				<< hardcoded static address. DX11: Control_DX11.exe+53803A - 48 8B 8C C6 286F1601  - mov rcx,[rsi+rax*8+01166F28]
Control_DX12.exe+538082 - 45 33 C9              - xor r9d,r9d
Control_DX12.exe+538085 - 48 85 C9              - test rcx,rcx
Control_DX12.exe+538088 - 74 20                 - je Control_DX12.exe+5380AA
Control_DX12.exe+53808A - 48 8D 55 C0           - lea rdx,[rbp-40]

// freecam coords:
Control_DX12.exe+308A06 - F3 0F11 BB 84000000   - movss [rbx+00000084],xmm7
Control_DX12.exe+308A0E - F3 44 0F58 C9         - addss xmm9,xmm1
Control_DX12.exe+308A13 - F3 44 0F11 8B 80000000  - movss [rbx+00000080],xmm9
Control_DX12.exe+308A1C - 0F10 43 70            - movups xmm0,[rbx+70]				>> READ of freecam coords. Are writable at will. 
Control_DX12.exe+308A20 - 0F58 C3               - addps xmm0,xmm3
Control_DX12.exe+308A23 - 0F11 43 70            - movups [rbx+70],xmm0
Control_DX12.exe+308A27 - 7A 24                 - jp Control_DX12.exe+308A4D
Control_DX12.exe+308A29 - 75 22                 - jne Control_DX12.exe+308A4D
Control_DX12.exe+308A2B - 41 0F2E D0            - ucomiss xmm2,xmm8
Control_DX12.exe+308A2F - 7A 1C                 - jp Control_DX12.exe+308A4D
Control_DX12.exe+308A31 - 75 1A                 - jne Control_DX12.exe+308A4D
Control_DX12.exe+308A33 - 66 0F3A40 ED 7F       - dpps xmm5,xmm5,7F

// Freecam fov is then at rbx-20. Freely writable. 
// Rotation speed is at offset 8C (float)

// Game camera.
// writes. Generic transform function. This function is called always. Intercept it, block writes
// and write our own quaternion / coords data to the location in rsi, instead of the values in xmm0/xmm1.
// so basically instead of the read using rdi, use a read into our own structs. 
// the getPosition / getRotation functions return a different set of values, but using this will end up returning our values
// so they don't need interception.
coregame_rmdwin10_f.dll+1BFC30 - 74 30                 - je coregame_rmdwin10_f.dll+1BFC62
coregame_rmdwin10_f.dll+1BFC32 - 48 8B 05 27F03C00     - mov rax,[coregame_rmdwin10_f.dll+58EC60] { (7FFE1F2F20F0) }
coregame_rmdwin10_f.dll+1BFC39 - 0F10 07               - movups xmm0,[rdi]
coregame_rmdwin10_f.dll+1BFC3C - 0F10 4F 10            - movups xmm1,[rdi+10]
coregame_rmdwin10_f.dll+1BFC40 - 0F11 86 C0000000      - movups [rsi+000000C0],xmm0					<< Write quaternion
coregame_rmdwin10_f.dll+1BFC47 - 0F11 8E D0000000      - movups [rsi+000000D0],xmm1					<< Write coords
coregame_rmdwin10_f.dll+1BFC4E - 48 8B 08              - mov rcx,[rax]
coregame_rmdwin10_f.dll+1BFC51 - 48 85 C9              - test rcx,rcx
coregame_rmdwin10_f.dll+1BFC54 - 74 0C                 - je coregame_rmdwin10_f.dll+1BFC62
coregame_rmdwin10_f.dll+1BFC56 - 48 8D 96 C0000000     - lea rdx,[rsi+000000C0]
coregame_rmdwin10_f.dll+1BFC5D - E8 FEA1E6FF           - call coregame_rmdwin10_f.dll+29E60
coregame_rmdwin10_f.dll+1BFC62 - 48 8B CE              - mov rcx,rsi
coregame_rmdwin10_f.dll+1BFC65 - E8 A6050000           - call coregame_rmdwin10_f.dll+1C0210

// Fov
// No writes to it to block. Radians. Default 1.13446
Control_DX12.exe+1FA383 - 74 1B                 - je Control_DX12.exe+1FA3A0
Control_DX12.exe+1FA385 - F3 0F11 03            - movss [rbx],xmm0
Control_DX12.exe+1FA389 - 48 8B 05 E867AE00     - mov rax,[Control_DX12.exe+CE0B78] { (7FFE1F2F20F0) }
Control_DX12.exe+1FA390 - 48 8B 08              - mov rcx,[rax]
Control_DX12.exe+1FA393 - 48 85 C9              - test rcx,rcx
Control_DX12.exe+1FA396 - 74 08                 - je Control_DX12.exe+1FA3A0
Control_DX12.exe+1FA398 - 48 8B D3              - mov rdx,rbx
Control_DX12.exe+1FA39B - E8 D03FE6FF           - call Control_DX12.exe+5E370
Control_DX12.exe+1FA3A0 - F3 0F10 03            - movss xmm0,[rbx]
Control_DX12.exe+1FA3A4 - 48 8D 93 20010000     - lea rdx,[rbx+00000120]
Control_DX12.exe+1FA3AB - 0F28 CE               - movaps xmm1,xmm6
Control_DX12.exe+1FA3AE - F3 0F5C C8            - subss xmm1,xmm0
Control_DX12.exe+1FA3B2 - F3 0F59 43 10         - mulss xmm0,[rbx+10]					<< READ FOV
Control_DX12.exe+1FA3B7 - F3 0F59 8B 98000000   - mulss xmm1,[rbx+00000098]
Control_DX12.exe+1FA3BF - F3 0F58 C8            - addss xmm1,xmm0
Control_DX12.exe+1FA3C3 - F3 0F10 02            - movss xmm0,[rdx]
Control_DX12.exe+1FA3C7 - 0F2E C1               - ucomiss xmm0,xmm1
Control_DX12.exe+1FA3CA - 7A 02                 - jp Control_DX12.exe+1FA3CE
Control_DX12.exe+1FA3CC - 74 18                 - je Control_DX12.exe+1FA3E6
Control_DX12.exe+1FA3CE - 48 8B 05 A367AE00     - mov rax,[Control_DX12.exe+CE0B78] { (7FFE1F2F20F0) }
Control_DX12.exe+1FA3D5 - F3 0F11 0A            - movss [rdx],xmm1
Control_DX12.exe+1FA3D9 - 48 8B 08              - mov rcx,[rax]

// or
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+31 - E8 CA8E0500           - call rl_rmdwin10_f.m::View::View
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+36 - 48 8D 4F 10           - lea rcx,[rdi+10]
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+3A - 48 8D 05 7F951300     - lea rax,[rl_rmdwin10_f.m::PerspectiveView::`vftable'] { (7FFE1EC4B680) }
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+41 - 48 89 07              - mov [rdi],rax
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+44 - 8B 83 E0020000        - mov eax,[rbx+000002E0]  >>>>>> READ FOV
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+4A - 89 87 E0020000        - mov [rdi+000002E0],eax
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+50 - 8B 83 E4020000        - mov eax,[rbx+000002E4]
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+56 - 89 87 E4020000        - mov [rdi+000002E4],eax
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+5C - 8B 83 E8020000        - mov eax,[rbx+000002E8]
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+62 - 89 87 E8020000        - mov [rdi+000002E8],eax
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+68 - 8B 83 EC020000        - mov eax,[rbx+000002EC]
rl_rmdwin10_f.m::PerspectiveView::PerspectiveView+6E - 89 87 EC020000        - mov [rdi+000002EC],eax

// Pause
// this object is needed, the gameSession:
// coregame_rmdwin10_f.coregame::GameClientBase::getGameSession
coregame_rmdwin10_f.dll+135600 - 48 8B 81 B0010000     - mov rax,[rcx+000001B0]	 >> read the game session, which is what we need to pass to the pause function
coregame_rmdwin10_f.dll+135607 - C3                    - ret 
coregame_rmdwin10_f.dll+135608 - CC                    - int 3 

// pass in gameclientbase address, obtained via:
Control_DX12.exe+5EC58D - 48 8B 05 7C4AB200     - mov rax,[Control_DX12.exe+1111010] { (1373655760) }
Control_DX12.exe+5EC594 - 48 33 C4              - xor rax,rsp
Control_DX12.exe+5EC597 - 48 89 85 60040000     - mov [rbp+00000460],rax
Control_DX12.exe+5EC59E - 4C 8B E9              - mov r13,rcx
Control_DX12.exe+5EC5A1 - 33 F6                 - xor esi,esi
Control_DX12.exe+5EC5A3 - 8B FE                 - mov edi,esi
Control_DX12.exe+5EC5A5 - 48 8B 05 1CAAB700     - mov rax,[Control_DX12.exe+1166FC8] { (56D31EE2E0) } >>> 
Control_DX12.exe+5EC5AC - 48 8B 48 30           - mov rcx,[rax+30]									  >>> gameclientbase 

// Pause function
// coregame_rmdwin10_f.coregame::ClientGameSessionRPCBase::pauseGameStubInvoker(gameSession*)
coregame_rmdwin10_f.dll+3C520 - 48 8B 89 80040000     - mov rcx,[rcx+00000480]
coregame_rmdwin10_f.dll+3C527 - 48 8D 15 DA298200     - lea rdx,[coregame_rmdwin10_f.dll+85EF08] { (567542165) }
coregame_rmdwin10_f.dll+3C52E - 48 81 C1 98000000     - add rcx,00000098 { 152 }
coregame_rmdwin10_f.dll+3C535 - 45 33 C9              - xor r9d,r9d
coregame_rmdwin10_f.dll+3C538 - 45 33 C0              - xor r8d,r8d
coregame_rmdwin10_f.dll+3C53B - 48 FF 25 F61F5500     - jmp qword ptr [coregame_rmdwin10_f.dll+58E538] { ->rl_rmdwin10_f.dll+151200 }
coregame_rmdwin10_f.dll+3C542 - CC                    - int 3 
coregame_rmdwin10_f.dll+3C543 - CC                    - int 3 

// Unpause function
coregame_rmdwin10_f.coregame::ClientGameSessionRPCBase::unpauseGameStub(gameSession*)
coregame_rmdwin10_f.dll+3C600 - 48 8B 89 80040000     - mov rcx,[rcx+00000480]
coregame_rmdwin10_f.dll+3C607 - 48 8D 15 FE288200     - lea rdx,[coregame_rmdwin10_f.dll+85EF0C] { (1520318608) }
coregame_rmdwin10_f.dll+3C60E - 48 81 C1 98000000     - add rcx,00000098 { 152 }
coregame_rmdwin10_f.dll+3C615 - 45 33 C9              - xor r9d,r9d
coregame_rmdwin10_f.dll+3C618 - 45 33 C0              - xor r8d,r8d
coregame_rmdwin10_f.dll+3C61B - 48 FF 25 161F5500     - jmp qword ptr [coregame_rmdwin10_f.dll+58E538] { ->rl_rmdwin10_f.dll+151200 }
coregame_rmdwin10_f.dll+3C622 - CC                    - int 3 

// Hotsampling
// latest patch:
coregame_rmdwin10_f.dll+A7A4D - 48 8D 55 58           - lea rdx,[rbp+58]
coregame_rmdwin10_f.dll+A7A51 - FF 90 A8000000        - call qword ptr [rax+000000A8]
coregame_rmdwin10_f.dll+A7A57 - 44 8B A6 04010000     - mov r12d,[rsi+00000104]
coregame_rmdwin10_f.dll+A7A5E - 44 3B 65 5C           - cmp r12d,[rbp+5C]
coregame_rmdwin10_f.dll+A7A62 - 7C 29                 - jl coregame_rmdwin10_f.dll+A7A8D		>> change to JMP, no window resize if resized > desktop
coregame_rmdwin10_f.dll+A7A64 - 48 8B 4E 70           - mov rcx,[rsi+70]
coregame_rmdwin10_f.dll+A7A68 - 48 8B 01              - mov rax,[rcx]
coregame_rmdwin10_f.dll+A7A6B - FF 90 88000000        - call qword ptr [rax+00000088]
coregame_rmdwin10_f.dll+A7A71 - 48 8B C8              - mov rcx,rax
coregame_rmdwin10_f.dll+A7A74 - BA 03000000           - mov edx,00000003 { 3 }
coregame_rmdwin10_f.dll+A7A79 - FF 15 59774F00        - call qword ptr [coregame_rmdwin10_f.dll+59F1D8] { ->->win32u.dll+1B70 }
coregame_rmdwin10_f.dll+A7A7F - B2 01                 - mov dl,01 { 1 }
// RTM game:
coregame_rmdwin10_f.dll+AA105 - 48 8D 55 58           - lea rdx,[rbp+58]
coregame_rmdwin10_f.dll+AA109 - FF 90 A8000000        - call qword ptr [rax+000000A8]
coregame_rmdwin10_f.dll+AA10F - 44 8B A6 00010000     - mov r12d,[rsi+00000100]
coregame_rmdwin10_f.dll+AA116 - 44 3B 65 5C           - cmp r12d,[rbp+5C]
coregame_rmdwin10_f.dll+AA11A - 7C 29                 - jl coregame_rmdwin10_f.dll+AA145		>> change to JMP, no window resize if resized > desktop
coregame_rmdwin10_f.dll+AA11C - 48 8B 4E 70           - mov rcx,[rsi+70]
coregame_rmdwin10_f.dll+AA120 - 48 8B 01              - mov rax,[rcx]
coregame_rmdwin10_f.dll+AA123 - FF 90 88000000        - call qword ptr [rax+00000088]
coregame_rmdwin10_f.dll+AA129 - 48 8B C8              - mov rcx,rax
coregame_rmdwin10_f.dll+AA12C - BA 03000000           - mov edx,00000003 { 3 }
coregame_rmdwin10_f.dll+AA131 - FF 15 99204E00        - call qword ptr [coregame_rmdwin10_f.dll+58C1D0] { ->->win32u.dll+1B70 } >> User32.SetWindow(hwd, 3)
coregame_rmdwin10_f.dll+AA137 - B2 01                 - mov dl,01 { 1 }
coregame_rmdwin10_f.dll+AA139 - 88 55 48              - mov [rbp+48],dl
coregame_rmdwin10_f.dll+AA13C - 44 8B A6 00010000     - mov r12d,[rsi+00000100]
coregame_rmdwin10_f.dll+AA143 - EB 04                 - jmp coregame_rmdwin10_f.dll+AA149

// Allow any resolution (SRWE)
// latest patch:
coregame_rmdwin10_f.dll+AC26F - 8B 83 18010000        - mov eax,[rbx+00000118]
coregame_rmdwin10_f.dll+AC275 - 48 8D 54 24 20        - lea rdx,[rsp+20]
coregame_rmdwin10_f.dll+AC27A - 0F10 8B B0000000      - movups xmm1,[rbx+000000B0]
coregame_rmdwin10_f.dll+AC281 - 41 B8 01000000        - mov r8d,00000001					>> Change to mov r8d, 0. 
coregame_rmdwin10_f.dll+AC287 - 89 84 24 98000000     - mov [rsp+00000098],eax
coregame_rmdwin10_f.dll+AC28E - 0F29 44 24 20         - movaps [rsp+20],xmm0
coregame_rmdwin10_f.dll+AC293 - 48 8B CB              - mov rcx,rbx
// october patch:
coregame_rmdwin10_f.dll+A761F - 8B 83 18010000        - mov eax,[rbx+00000118]
coregame_rmdwin10_f.dll+A7625 - 48 8D 54 24 20        - lea rdx,[rsp+20]
coregame_rmdwin10_f.dll+A762A - 0F10 8B B0000000      - movups xmm1,[rbx+000000B0]
coregame_rmdwin10_f.dll+A7631 - 41 B8 01000000        - mov r8d,00000001					>> Change to mov r8d, 0. 
coregame_rmdwin10_f.dll+A7637 - 89 84 24 98000000     - mov [rsp+00000098],eax
coregame_rmdwin10_f.dll+A763E - 0F29 44 24 20         - movaps [rsp+20],xmm0
coregame_rmdwin10_f.dll+A7643 - 48 8B CB              - mov rcx,rbx
coregame_rmdwin10_f.dll+A7646 - 0F10 83 C0000000      - movups xmm0,[rbx+000000C0]
coregame_rmdwin10_f.dll+A764D - F3 0F2C 47 04         - cvttss2si eax,[rdi+04]
// RTM game:
coregame_rmdwin10_f.dll+A9CE2 - 0F85 90000000         - jne coregame_rmdwin10_f.dll+A9D78
coregame_rmdwin10_f.dll+A9CE8 - 0F10 8B B0000000      - movups xmm1,[rbx+000000B0]
coregame_rmdwin10_f.dll+A9CEF - 41 B8 00000001        - mov r8d,00000001					>> Change to mov r8d, 0. 
coregame_rmdwin10_f.dll+A9CF5 - 48 8D 54 24 20        - lea rdx,[rsp+20]
coregame_rmdwin10_f.dll+A9CFA - F3 0F2C 47 04         - cvttss2si eax,[rdi+04]
coregame_rmdwin10_f.dll+A9CFF - 48 8B CB              - mov rcx,rbx
coregame_rmdwin10_f.dll+A9D02 - 0F10 83 A0000000      - movups xmm0,[rbx+000000A0]
coregame_rmdwin10_f.dll+A9D09 - 0F29 4C 24 30         - movaps [rsp+30],xmm1
coregame_rmdwin10_f.dll+A9D0E - 0F10 8B D0000000      - movups xmm1,[rbx+000000D0]
coregame_rmdwin10_f.dll+A9D15 - 0F29 44 24 20         - movaps [rsp+20],xmm0

// Autoadjust AR:
// latest patch:
coregame_rmdwin10_f.dll+A80BB - 45 8B C1              - mov r8d,r9d
coregame_rmdwin10_f.dll+A80BE - 44 89 89 84000000     - mov [rcx+00000084],r9d
coregame_rmdwin10_f.dll+A80C5 - 89 99 88000000        - mov [rcx+00000088],ebx
coregame_rmdwin10_f.dll+A80CB - 44 89 89 8C000000     - mov [rcx+0000008C],r9d
coregame_rmdwin10_f.dll+A80D2 - 0F85 C6000000         - jne coregame_rmdwin10_f.dll+A819E			<< Change to JMP + nop
coregame_rmdwin10_f.dll+A80D8 - 66 0F6E CB            - movd xmm1,ebx
coregame_rmdwin10_f.dll+A80DC - 66 41 0F6E C1         - movd xmm0,r9d
coregame_rmdwin10_f.dll+A80E1 - 0F5B C0               - cvtdq2ps xmm0,xmm0
coregame_rmdwin10_f.dll+A80E4 - C7 81 30010000 FFFFFFFF - mov [rcx+00000130],FFFFFFFF { -1 }
coregame_rmdwin10_f.dll+A80EE - 0F5B C9               - cvtdq2ps xmm1,xmm1
// RTM game:
coregame_rmdwin10_f.dll+AA761 - 89 99 80000000        - mov [rcx+00000080],ebx
coregame_rmdwin10_f.dll+AA767 - 44 8B 4A 04           - mov r9d,[rdx+04]
coregame_rmdwin10_f.dll+AA76B - 45 8B C1              - mov r8d,r9d
coregame_rmdwin10_f.dll+AA76E - 44 89 89 84000000     - mov [rcx+00000084],r9d
coregame_rmdwin10_f.dll+AA775 - 89 99 88000000        - mov [rcx+00000088],ebx
coregame_rmdwin10_f.dll+AA77B - 44 89 89 8C000000     - mov [rcx+0000008C],r9d
coregame_rmdwin10_f.dll+AA782 - 0F85 C6000000         - jne coregame_rmdwin10_f.dll+AA84E			<< Change to JMP + nop
coregame_rmdwin10_f.dll+AA788 - 66 0F6E CB            - movd xmm1,ebx
coregame_rmdwin10_f.dll+AA78C - 66 41 0F6E C1         - movd xmm0,r9d
coregame_rmdwin10_f.dll+AA791 - 0F5B C0               - cvtdq2ps xmm0,xmm0
coregame_rmdwin10_f.dll+AA794 - C7 81 28010000 FFFFFFFF - mov [rcx+00000128],FFFFFFFF { -1 }

// Change render resolution
// Latest patch.
// write render width/height at width+8/height+8 in stackframe.
coregame_rmdwin10_f.dll+A7687 - F2 0F10 8B 10010000   - movsd xmm1,[rbx+00000110]
coregame_rmdwin10_f.dll+A768F - 0F29 84 24 80000000   - movaps [rsp+00000080],xmm0
coregame_rmdwin10_f.dll+A7697 - 89 84 24 80000000     - mov [rsp+00000080],eax				<< screen width
coregame_rmdwin10_f.dll+A769E - F3 0F2C 47 08         - cvttss2si eax,[rdi+08]
coregame_rmdwin10_f.dll+A76A3 - F2 0F11 8C 24 90000000  - movsd [rsp+00000090],xmm1
coregame_rmdwin10_f.dll+A76AC - 89 84 24 84000000     - mov [rsp+00000084],eax				<< screen height, intercept here
coregame_rmdwin10_f.dll+A76B3 - E8 38020000           - call coregame_rmdwin10_f.dll+A78F0
coregame_rmdwin10_f.dll+A76B8 - 48 8B 9C 24 B0000000  - mov rbx,[rsp+000000B0]
coregame_rmdwin10_f.dll+A76C0 - B0 01                 - mov al,01 { 1 }
// RTM Game
coregame_rmdwin10_f.dll+A9CE8 - 0F10 8B B0000000      - movups xmm1,[rbx+000000B0]
coregame_rmdwin10_f.dll+A9CEF - 41 B8 00000000        - mov r8d,00000000 { 0 }
coregame_rmdwin10_f.dll+A9CF5 - 48 8D 54 24 20        - lea rdx,[rsp+20]
coregame_rmdwin10_f.dll+A9CFA - F3 0F2C 47 04         - cvttss2si eax,[rdi+04]				>> New width
coregame_rmdwin10_f.dll+A9CFF - 48 8B CB              - mov rcx,rbx
coregame_rmdwin10_f.dll+A9D02 - 0F10 83 A0000000      - movups xmm0,[rbx+000000A0]
coregame_rmdwin10_f.dll+A9D09 - 0F29 4C 24 30         - movaps [rsp+30],xmm1
coregame_rmdwin10_f.dll+A9D0E - 0F10 8B D0000000      - movups xmm1,[rbx+000000D0]
coregame_rmdwin10_f.dll+A9D15 - 0F29 44 24 20         - movaps [rsp+20],xmm0
coregame_rmdwin10_f.dll+A9D1A - 0F10 83 C0000000      - movups xmm0,[rbx+000000C0]
//....
coregame_rmdwin10_f.dll+A9D3E - F2 0F10 8B 10010000   - movsd xmm1,[rbx+00000110]
coregame_rmdwin10_f.dll+A9D46 - 89 44 24 7C           - mov [rsp+7C],eax
coregame_rmdwin10_f.dll+A9D4A - F3 0F2C 47 08         - cvttss2si eax,[rdi+08]				>> New height
coregame_rmdwin10_f.dll+A9D4F - 0F29 44 24 60         - movaps [rsp+60],xmm0				>> Write render width/height (rsp+60, rsp+64). << NOT CORRECT!
coregame_rmdwin10_f.dll+A9D54 - 0F10 83 00010000      - movups xmm0,[rbx+00000100]
coregame_rmdwin10_f.dll+A9D5B - F2 0F11 8C 24 90000000  - movsd [rsp+00000090],xmm1
coregame_rmdwin10_f.dll+A9D64 - 0F29 84 24 80000000   - movaps [rsp+00000080],xmm0
coregame_rmdwin10_f.dll+A9D6C - 89 84 24 80000000     - mov [rsp+00000080],eax

// End up at: 
[coregame_rmdwin10_f.dll+85A978] -> +0x104 // Width
[coregame_rmdwin10_f.dll+85A978] -> +0x108 // Height

// Disable call to showwindow
// Latest patch:
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+178 - 48 8B 01              - mov rax,[rcx]
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+17B - FF 90 88000000        - call qword ptr [rax+00000088]
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+181 - 48 8B C8              - mov rcx,rax
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+184 - BA 03000000           - mov edx,00000003 { 3 }
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+189 - FF 15 59774F00        - call qword ptr [coregame_rmdwin10_f.dll+59F1D8] { ->->win32u.NtUserShowWindow }
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+18F - B2 01                 - mov dl,01 { 1 }
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+191 - 88 55 48              - mov [rbp+48],dl
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+194 - 44 8B A6 04010000     - mov r12d,[rsi+00000104]
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+19B - EB 04                 - jmp coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+1A1
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+19D - 0FB6 55 48            - movzx edx,byte ptr [rbp+48]
// RTM game:
coregame_rmdwin10_f.coregame::GameWindow::setUserRendererSettings+181

// HUD toggle
Control_DX12.exe+508CFF - 48 8B C8              - mov rcx,rax
Control_DX12.exe+508D02 - 8B D3                 - mov edx,ebx
Control_DX12.exe+508D04 - FF 15 E6497D00        - call qword ptr [Control_DX12.exe+CDD6F0] { ->renderer_rmdwin10_f.rend::ShapeEngine::pushToRenderer }
Control_DX12.exe+508D0A - FF C3                 - inc ebx
Control_DX12.exe+508D0C - 48 81 C6 F0000000     - add rsi,000000F0 { 240 }
Control_DX12.exe+508D13 - 83 FB 16              - cmp ebx,16 { 22 }
Control_DX12.exe+508D16 - 7C D5                 - jl Control_DX12.exe+508CED
Control_DX12.exe+508D18 - 48 8B 4F 18           - mov rcx,[rdi+18]
Control_DX12.exe+508D1C - FF 15 DE497D00        - call qword ptr [Control_DX12.exe+CDD700] >>>>>>> NOP CALL. { ->renderer_rmdwin10_f.rend::RendererInterfaceWrapper::renderHUD }
Control_DX12.exe+508D22 - 48 8B 4F 18           - mov rcx,[rdi+18]
Control_DX12.exe+508D26 - FF 15 94497D00        - call qword ptr [Control_DX12.exe+CDD6C0] { ->renderer_rmdwin10_f.rend::RendererInterfaceWrapper::end }
Control_DX12.exe+508D2C - 48 8B 0D 45547D00     - mov rcx,[Control_DX12.exe+CDE178] { (7FFE1FB05A08) }
Control_DX12.exe+508D33 - 0FB6 54 24 20         - movzx edx,byte ptr [rsp+20]
Control_DX12.exe+508D38 - 48 8B 09              - mov rcx,[rcx]
Control_DX12.exe+508D3B - E8 30160000           - call Control_DX12.exe+50A370

Better:
CoherentGTCore.WebCore::GraphicsLayer::setOpacity:
xorps the value in xmm1 and then do the regular instruction:   movss [rcx+00000168],xmm1
this will reset the opacity for all elements. 
Only problem: it runs only when the layer changes, so menu on/off. A way to trigger it is needed. 

// Alternative:
rend::RenderOptions::PaintUI:
    db 0

This has the downside that it isn't picked up immediately, you have to enable/disable the menu again.


// Alternative timestop
// Pausing r::Timer. 
// latest patch
Control_DX12.exe+3294FC - FF 15 1EC19F00        - call qword ptr [Control_DX12.exe+D25620] { ->rl_rmdwin10_f.r::ScratchPad::garbageCollection }
Control_DX12.exe+329502 - FF 15 20C19F00        - call qword ptr [Control_DX12.exe+D25628] { ->rl_rmdwin10_f.r::ScratchPad::freeAll }
Control_DX12.exe+329508 - BA 02000000           - mov edx,00000002 { 2 }
Control_DX12.exe+32950D - 48 8B 0D 048CE900     - mov rcx,[Control_DX12.exe+11C2118]    <<<<<<< Read r::Timer global instance. DX11: offset 31A389, offset is 1166F88
Control_DX12.exe+329514 - E8 37E20900           - call Control_DX12.exe+3C7750
Control_DX12.exe+329519 - BA 01000000           - mov edx,00000001 { 1 }
Control_DX12.exe+32951E - 48 8B 0D F38BE900     - mov rcx,[Control_DX12.exe+11C2118] { (2809FE969D0) }
Control_DX12.exe+329525 - E8 26E20900           - call Control_DX12.exe+3C7750
Control_DX12.exe+32952A - 48 8B 05 E7D89F00     - mov rax,[Control_DX12.exe+D26E18] { (7FFCCCDA7938) }
Control_DX12.exe+329531 - 48 8B 08              - mov rcx,[rax]
Control_DX12.exe+329534 - F3 0F10 71 10         - movss xmm6,[rcx+10]
// October patch:
Control_DX12.exe+31A4F8 - FF 15 1AC19E00        - call qword ptr [Control_DX12.exe+D06618] { ->rl_rmdwin10_f.r::ScratchPad::garbageCollection }
Control_DX12.exe+31A4FE - FF 15 1CC19E00        - call qword ptr [Control_DX12.exe+D06620] { ->rl_rmdwin10_f.r::ScratchPad::freeAll }
Control_DX12.exe+31A504 - BA 02000000           - mov edx,00000002 { 2 }
Control_DX12.exe+31A509 - 48 8B 0D E8E0E700     - mov rcx,[Control_DX12.exe+11985F8]    <<<<<<< Read r::Timer global instance. DX11: offset 31A389, offset is 1166F88
Control_DX12.exe+31A510 - E8 7BD70900           - call Control_DX12.exe+3B7C90
Control_DX12.exe+31A515 - BA 01000000           - mov edx,00000001 { 1 }
Control_DX12.exe+31A51A - 48 8B 0D D7E0E700     - mov rcx,[Control_DX12.exe+11985F8]
Control_DX12.exe+31A521 - E8 6AD70900           - call Control_DX12.exe+3B7C90
Control_DX12.exe+31A526 - 48 8B 05 9BD89E00     - mov rax,[Control_DX12.exe+D07DC8] { (7FFD64BE5398) }
// RTM Game:
Control_DX12.exe+30C838 - FF 15 1A2D9D00        - call qword ptr [Control_DX12.exe+CDF558] { ->rl_rmdwin10_f.r::ScratchPad::garbageCollection }
Control_DX12.exe+30C83E - FF 15 1C2D9D00        - call qword ptr [Control_DX12.exe+CDF560] { ->rl_rmdwin10_f.r::ScratchPad::freeAll }
Control_DX12.exe+30C844 - BA 02000000           - mov edx,00000002 { 2 }
Control_DX12.exe+30C849 - 48 8B 0D 38A8E500     - mov rcx,[Control_DX12.exe+1167088]          <<<<<<< Read r::Timer global instance. DX11: same location, offset is 1166F88
Control_DX12.exe+30C850 - E8 DBB50900           - call Control_DX12.exe+3A7E30
Control_DX12.exe+30C855 - BA 01000000           - mov edx,00000001 { 1 }
Control_DX12.exe+30C85A - 48 8B 0D 27A8E500     - mov rcx,[Control_DX12.exe+1167088] { (247C8D659D0) }
Control_DX12.exe+30C861 - E8 CAB50900           - call Control_DX12.exe+3A7E30
Control_DX12.exe+30C866 - 48 8B 05 73449D00     - mov rax,[Control_DX12.exe+CE0CE0] { (7FFE1EEC5388) }
Control_DX12.exe+30C86D - 48 8B 08              - mov rcx,[rax]
Control_DX12.exe+30C870 - F3 0F10 71 10         - movss xmm6,[rcx+10]
Control_DX12.exe+30C875 - 0F5A F6               - vcvtps2pd xmm6,xmm6

Control_DX12.exe+3A7E68 - 4C 89 68 D0           - mov [rax-30],r13
Control_DX12.exe+3A7E6C - FF 15 C6729300        - call qword ptr [Control_DX12.exe+CDF138] { ->rl_rmdwin10_f.r::Timer::getAppAge }
Control_DX12.exe+3A7E72 - 44 0F28 D0            - movaps xmm10,xmm0
Control_DX12.exe+3A7E76 - 83 FE 01              - cmp esi,01 { 1 }
Control_DX12.exe+3A7E79 - 75 19                 - jne Control_DX12.exe+3A7E94
Control_DX12.exe+3A7E7B - 0FB6 53 39            - movzx edx,byte ptr [rbx+39]					<< Timer enable byte read. 
Control_DX12.exe+3A7E7F - 38 53 38              - cmp [rbx+38],dl
Control_DX12.exe+3A7E82 - 74 10                 - je Control_DX12.exe+3A7E94
Control_DX12.exe+3A7E84 - 48 8B 0D F5F1DB00     - mov rcx,[Control_DX12.exe+1167080] { (247C618A750) }
Control_DX12.exe+3A7E8B - 44 8D 46 7F           - lea r8d,[rsi+7F]
Control_DX12.exe+3A7E8F - E8 6CCDFFFF           - call Control_DX12.exe+3A4C00
Control_DX12.exe+3A7E94 - 83 FE 01              - cmp esi,01 { 1 }
Control_DX12.exe+3A7E97 - 4C 89 BC 24 80000000  - mov [rsp+00000080],r15
Control_DX12.exe+3A7E9F - B8 68000000           - mov eax,00000068 { 104 }						<< 68 ofset
Control_DX12.exe+3A7EA4 - 41 BC 38000000        - mov r12d,00000038 { 56 }
Control_DX12.exe+3A7EAA - 44 0F45 E0            - cmovne r12d,eax
Control_DX12.exe+3A7EAE - B9 69000000           - mov ecx,00000069 { 105 }						<< 69 offset
Control_DX12.exe+3A7EB3 - B8 39000000           - mov eax,00000039 { 57 }
Control_DX12.exe+3A7EB8 - 41 BE 10000000        - mov r14d,00000010 { 16 }
Control_DX12.exe+3A7EBE - 0F45 C1               - cmovne eax,ecx
Control_DX12.exe+3A7EC1 - 41 8B FE              - mov edi,r14d
Control_DX12.exe+3A7EC4 - 41 BD 40000000        - mov r13d,00000040 { 64 }
Control_DX12.exe+3A7ECA - 41 0F45 FD            - cmovne edi,r13d
Control_DX12.exe+3A7ECE - 0FB6 04 18            - movzx eax,byte ptr [rax+rbx]
Control_DX12.exe+3A7ED2 - 41 88 04 1C           - mov [r12+rbx],al
Control_DX12.exe+3A7ED6 - F3 0F10 43 04         - movss xmm0,[rbx+04]
Control_DX12.exe+3A7EDB - 0F5A C0               - vcvtps2pd xmm0,xmm0

// to enable timestop: set offset 39 and 69 to 1
// to disable timestop: set 38-3b and 68-6b to 0

// Noteworthy Renderoptions:
rend::RenderOptions::RenderBloom     (bool)  -> setting to 0 switches off Bloom
rend::RenderOptions::RenderDepthOfField (bool)
rend::RenderOptions::RenderVectorBlur   (bool)  -> setting to 0 switches off motion blur
rend::RenderOptions::ScreenSpaceAntialiasing (bool) -> 0 -> no AA

// Don't pause when focus loss
coregame_rmdwin10_f.dll+ABFE4 - 48 8B D9              - mov rbx,rcx
coregame_rmdwin10_f.dll+ABFE7 - 48 8B 05 FA854F00     - mov rax,[coregame_rmdwin10_f.dll+5A45E8] { (7FFD095C6790) }
coregame_rmdwin10_f.dll+ABFEE - 44 88 81 9B000000     - mov [rcx+0000009B],r8l					<< Always write 1 here.
coregame_rmdwin10_f.dll+ABFF5 - 48 8B 10              - mov rdx,[rax]
coregame_rmdwin10_f.dll+ABFF8 - 44 88 42 39           - mov [rdx+39],r8l
coregame_rmdwin10_f.dll+ABFFC - 48 8B 49 70           - mov rcx,[rcx+70]
coregame_rmdwin10_f.dll+AC000 - 48 8B 01              - mov rax,[rcx]
coregame_rmdwin10_f.dll+AC003 - FF 90 88000000        - call qword ptr [rax+00000088]
coregame_rmdwin10_f.dll+AC009 - 0FB6 8B 9B000000      - movzx ecx,byte ptr [rbx+0000009B]
coregame_rmdwin10_f.dll+AC010 - 48 8B F0              - mov rsi,rax
coregame_rmdwin10_f.dll+AC013 - 84 C9                 - test cl,cl
// October patch: 
coregame_rmdwin10_f.dll+A738B - 48 83 EC 40           - sub rsp,40 { 64 }
coregame_rmdwin10_f.dll+A738F - 44 0FB6 42 04         - movzx r8d,byte ptr [rdx+04]
coregame_rmdwin10_f.dll+A7394 - 48 8B D9              - mov rbx,rcx
coregame_rmdwin10_f.dll+A7397 - 48 8B 05 4A824F00     - mov rax,[coregame_rmdwin10_f.dll+59F5E8] { (7FFDA7066790) }
coregame_rmdwin10_f.dll+A739E - 44 88 81 9B000000     - mov [rcx+0000009B],r8l					<< Always write 1 here.
coregame_rmdwin10_f.dll+A73A5 - 48 8B 10              - mov rdx,[rax]
coregame_rmdwin10_f.dll+A73A8 - 44 88 42 39           - mov [rdx+39],r8l
coregame_rmdwin10_f.dll+A73AC - 48 8B 49 70           - mov rcx,[rcx+70]
coregame_rmdwin10_f.dll+A73B0 - 48 8B 01              - mov rax,[rcx]
coregame_rmdwin10_f.dll+A73B3 - FF 90 88000000        - call qword ptr [rax+00000088]
coregame_rmdwin10_f.dll+A73B9 - 0FB6 8B 9B000000      - movzx ecx,byte ptr [rbx+0000009B]
// RTM game:
coregame_rmdwin10_f.dll+A9A9A - 57                    - push rdi
coregame_rmdwin10_f.dll+A9A9B - 48 83 EC 40           - sub rsp,40 { 64 }
coregame_rmdwin10_f.dll+A9A9F - 44 0FB6 42 04         - movzx r8d,byte ptr [rdx+04]
coregame_rmdwin10_f.dll+A9AA4 - 48 8B D9              - mov rbx,rcx
coregame_rmdwin10_f.dll+A9AA7 - 48 8B 05 222B4E00     - mov rax,[coregame_rmdwin10_f.dll+58C5D0] { (7FFBD0045790) }
coregame_rmdwin10_f.dll+A9AAE - 44 88 81 9B000000     - mov [rcx+0000009B],r8l					<< Always write 1 here.
coregame_rmdwin10_f.dll+A9AB5 - 48 8B 10              - mov rdx,[rax]
coregame_rmdwin10_f.dll+A9AB8 - 44 88 42 39           - mov [rdx+39],r8l
coregame_rmdwin10_f.dll+A9ABC - 48 8B 49 70           - mov rcx,[rcx+70]
coregame_rmdwin10_f.dll+A9AC0 - 48 8B 01              - mov rax,[rcx]
coregame_rmdwin10_f.dll+A9AC3 - FF 90 88000000        - call qword ptr [rax+00000088]
coregame_rmdwin10_f.dll+A9AC9 - 0FB6 8B 9B000000      - movzx ecx,byte ptr [rbx+0000009B]

// Outline hide (Contributed by Pigeon)
// Latest patch
Control_DX12.exe+ACECB - 80 7D 40 00           - cmp byte ptr [rbp+40],00 { 0 }
Control_DX12.exe+ACECF - 0F84 83020000         - je Control_DX12.exe+AD158
Control_DX12.exe+ACED5 - 49 8B 85 90030000     - mov rax,[r13+00000390]
Control_DX12.exe+ACEDC - 80 38 00              - cmp byte ptr [rax],00 { 0 }
Control_DX12.exe+ACEDF - 0F84 73020000         - je Control_DX12.exe+AD158				>> Change to jmp to hide outlines. DX11: same
Control_DX12.exe+ACEE5 - 45 84 FF              - test r15l,r15l
Control_DX12.exe+ACEE8 - 0F85 6A020000         - jne Control_DX12.exe+AD158
Control_DX12.exe+ACEEE - 49 8B 85 70010000     - mov rax,[r13+00000170]
Control_DX12.exe+ACEF5 - 8B 90 D0010000        - mov edx,[rax+000001D0]
Control_DX12.exe+ACEFB - 8B C2                 - mov eax,edx
Control_DX12.exe+ACEFD - C1 F8 1F              - sar eax,1F { 31 }
Control_DX12.exe+ACF00 - 83 E0 01              - and eax,01 { 1 }
Control_DX12.exe+ACF03 - FF C0                 - inc eax

// october patch:
Control_DX12.exe+AD19D - 0F82 95020000         - jb Control_DX12.exe+AD438
Control_DX12.exe+AD1A3 - 84 C0                 - test al,al
Control_DX12.exe+AD1A5 - 0F84 8D020000         - je Control_DX12.exe+AD438
Control_DX12.exe+AD1AB - 80 7D 40 00           - cmp byte ptr [rbp+40],00 { 0 }
Control_DX12.exe+AD1AF - 0F84 83020000         - je Control_DX12.exe+AD438
Control_DX12.exe+AD1B5 - 49 8B 85 70030000     - mov rax,[r13+00000370]
Control_DX12.exe+AD1BC - 80 38 00              - cmp byte ptr [rax],00 { 0 }
Control_DX12.exe+AD1BF - 0F84 73020000         - je Control_DX12.exe+AD438				>> Change to jmp to hide outlines. DX11: same
Control_DX12.exe+AD1C5 - 45 84 FF              - test r15l,r15l
Control_DX12.exe+AD1C8 - 0F85 6A020000         - jne Control_DX12.exe+AD438
Control_DX12.exe+AD1CE - 49 8B 85 70010000     - mov rax,[r13+00000170]
Control_DX12.exe+AD1D5 - 8B 90 D0010000        - mov edx,[rax+000001D0]
Control_DX12.exe+AD1DB - 8B C2                 - mov eax,edx
Control_DX12.exe+AD1DD - C1 F8 1F              - sar eax,1F { 31 }
// RTM Game:
Control_DX12.exe+ABAA5 - 0F84 8D020000         - je Control_DX12.exe+ABD38
Control_DX12.exe+ABAAB - 80 7D 40 00           - cmp byte ptr [rbp+40],00 { 0 }
Control_DX12.exe+ABAAF - 0F84 83020000         - je Control_DX12.exe+ABD38
Control_DX12.exe+ABAB5 - 49 8B 85 70030000     - mov rax,[r13+00000370]
Control_DX12.exe+ABABC - 80 38 00              - cmp byte ptr [rax],00 { 0 }
Control_DX12.exe+ABABF - 0F84 73020000         - je Control_DX12.exe+ABD38				>> Change to jmp to hide outlines
Control_DX12.exe+ABAC5 - 45 84 FF              - test r15l,r15l
Control_DX12.exe+ABAC8 - 0F85 6A020000         - jne Control_DX12.exe+ABD38
Control_DX12.exe+ABACE - 49 8B 85 70010000     - mov rax,[r13+00000170]
Control_DX12.exe+ABAD5 - 8B 90 D0010000        - mov edx,[rax+000001D0]
Control_DX12.exe+ABADB - 8B C2                 - mov eax,edx
Control_DX12.exe+ABADD - C1 F8 1F              - sar eax,1F { 31 }
Control_DX12.exe+ABAE0 - 83 E0 01              - and eax,01 { 1 }

// Light setup is done in:
coregame_rmdwin10_f.coregame::SpotLightComponent::gameSetup...
for each light. 

spotlight reversed: https://pastebin.com/Ss1ZCb19