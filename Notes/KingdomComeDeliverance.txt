Kingdom come deliverance

// Enable ansel everywhere:
// Ansel Start session
WHGame.DLL+1FA251C - 40 53                 - push rbx
WHGame.DLL+1FA251E - 48 83 EC 20           - sub rsp,20 { 32 }
WHGame.DLL+1FA2522 - 48 83 3D E62A8E00 00  - cmp qword ptr [WHGame.DLL+2885010],00 { (7FFB1E594720),0 }
WHGame.DLL+1FA252A - 48 8B D9              - mov rbx,rcx
WHGame.DLL+1FA252D - 75 04                 - jne WHGame.DLL+1FA2533			>> change to JMP
WHGame.DLL+1FA252F - 31 C0                 - xor eax,eax
WHGame.DLL+1FA2531 - EB 22                 - jmp WHGame.DLL+1FA2555
WHGame.DLL+1FA2533 - E8 A81AFFFF           - call WHGame.DLL+1F93FE0
WHGame.DLL+1FA2538 - 84 C0                 - test al,al
WHGame.DLL+1FA253A - 74 F3                 - je WHGame.DLL+1FA252F			>> NOP
WHGame.DLL+1FA253C - C6 43 04 00           - mov byte ptr [rbx+04],00 { 0 }
WHGame.DLL+1FA2540 - E8 1B9787FE           - call WHGame.DLL+81BC60
WHGame.DLL+1FA2545 - 48 8B 88 80000000     - mov rcx,[rax+00000080]
WHGame.DLL+1FA254C - B8 01000000           - mov eax,00000001 { 1 }
WHGame.DLL+1FA2551 - C6 41 0A 01           - mov byte ptr [rcx+0A],01 { 1 }
WHGame.DLL+1FA2555 - 48 83 C4 20           - add rsp,20 { 32 }
WHGame.DLL+1FA2559 - 5B                    - pop rbx
WHGame.DLL+1FA255A - C3                    - ret 

// Ansel stop session.
WHGame.DLL+1FA257C - 48 83 EC 28           - sub rsp,28 { 40 }
WHGame.DLL+1FA2580 - 48 83 3D 882A8E00 00  - cmp qword ptr [WHGame.DLL+2885010],00 { (7FFB1E594720),0 }
WHGame.DLL+1FA2588 - 74 10                 - je WHGame.DLL+1FA259A
WHGame.DLL+1FA258A - E8 D19687FE           - call WHGame.DLL+81BC60
WHGame.DLL+1FA258F - 48 8B 88 80000000     - mov rcx,[rax+00000080]
WHGame.DLL+1FA2596 - C6 41 0A 01           - mov byte ptr [rcx+0A],01 { 1 }
WHGame.DLL+1FA259A - 48 83 C4 28           - add rsp,28 { 40 }
WHGame.DLL+1FA259E - C3                    - ret 


// Ansel unlimited range:
WHGame.DLL+1F939DC - F3 0F58 F0            - addss xmm6,xmm0
WHGame.DLL+1F939E0 - 41 0F28 C3            - movaps xmm0,xmm11
WHGame.DLL+1F939E4 - F3 0F58 F1            - addss xmm6,xmm1
WHGame.DLL+1F939E8 - F3 0F10 0D B0023A00   - movss xmm1,[WHGame.DLL+2333CA0] { (2.00) }
WHGame.DLL+1F939F0 - E8 DD7119FF           - call WHGame.DLL+112ABD2 { ->->ucrtbase.dll+2CA60 }
WHGame.DLL+1F939F5 - 0F2F F0               - comiss xmm6,xmm0
WHGame.DLL+1F939F8 - 0F86 91000000         - jbe WHGame.DLL+1F93A8F			>> change to JMP
WHGame.DLL+1F939FE - 48 8B 4B 38           - mov rcx,[rbx+38]
WHGame.DLL+1F93A02 - F3 41 0F58 F5         - addss xmm6,xmm13
WHGame.DLL+1F93A07 - 48 8D 55 DC           - lea rdx,[rbp-24]
WHGame.DLL+1F93A0B - 48 8B 01              - mov rax,[rcx]
WHGame.DLL+1F93A0E - F3 0F52 CE            - rsqrtss xmm1,xmm6
WHGame.DLL+1F93A12 - 0F28 C6               - movaps xmm0,xmm6
WHGame.DLL+1F93A15 - F3 0F11 8D C0000000   - movss [rbp+000000C0],xmm1
WHGame.DLL+1F93A1D - 41 0F28 CA            - movaps xmm1,xmm10

// Ansel coords, quaternion and fov. Cryengine.
WHGame.DLL+1F8A736 - F3 0F10 0D 626E6F01   - movss xmm1,[WHGame.DLL+36815A0] { (703.49) }		>> X
WHGame.DLL+1F8A73E - F3 0F11 0E            - movss [rsi],xmm1
WHGame.DLL+1F8A742 - F3 0F10 05 5A6E6F01   - movss xmm0,[WHGame.DLL+36815A4] { (3491.64) }		>> Y
WHGame.DLL+1F8A74A - F3 0F11 46 04         - movss [rsi+04],xmm0
WHGame.DLL+1F8A74F - F3 0F10 0D 516E6F01   - movss xmm1,[WHGame.DLL+36815A8] { (124.24) }		>> Z
WHGame.DLL+1F8A757 - F3 0F11 4E 08         - movss [rsi+08],xmm1
WHGame.DLL+1F8A75C - F3 0F10 05 486E6F01   - movss xmm0,[WHGame.DLL+36815AC] { (-0.01) }		>> qX
WHGame.DLL+1F8A764 - F3 0F11 46 0C         - movss [rsi+0C],xmm0
WHGame.DLL+1F8A769 - F3 0F10 0D 3F6E6F01   - movss xmm1,[WHGame.DLL+36815B0] { (-0.01) }		>> qY
WHGame.DLL+1F8A771 - F3 0F11 4E 10         - movss [rsi+10],xmm1
WHGame.DLL+1F8A776 - F3 0F10 05 366E6F01   - movss xmm0,[WHGame.DLL+36815B4] { (0.71) }			>> qZ
WHGame.DLL+1F8A77E - F3 0F11 46 14         - movss [rsi+14],xmm0
WHGame.DLL+1F8A783 - F3 0F10 0D 2D6E6F01   - movss xmm1,[WHGame.DLL+36815B8] { (0.70) }			>> qW
WHGame.DLL+1F8A78B - F3 0F11 4E 18         - movss [rsi+18],xmm1
WHGame.DLL+1F8A790 - F3 0F10 05 246E6F01   - movss xmm0,[WHGame.DLL+36815BC] { (65.00) }		>> FoV

// AnselSDK::UpdateCamera
// An alternative route: hook this, write the values in the struct in RCX. It's difficult however, as it also contains a RIP address
// and we need to hook it at the start, and there's no space.... 
AnselSDK64.ansel::updateCamera - 48 89 5C 24 08        - mov [rsp+08],rbx
AnselSDK64.ansel::updateCamera+5- 57                    - push rdi
AnselSDK64.ansel::updateCamera+6- 48 83 EC 20           - sub rsp,20 { 32 }
AnselSDK64.ansel::updateCamera+A- 48 8B 1D AFC20900     - mov rbx,[AnselSDK64.dll+9DC80] { (0) }
AnselSDK64.ansel::updateCamera+11- 48 8B F9              - mov rdi,rcx
AnselSDK64.ansel::updateCamera+14- 48 85 DB              - test rbx,rbx
AnselSDK64.ansel::updateCamera+17- 74 0E                 - je AnselSDK64.ansel::updateCamera+27
AnselSDK64.ansel::updateCamera+19- 48 8B CB              - mov rcx,rbx
AnselSDK64.ansel::updateCamera+1C- FF 15 EEE90600        - call qword ptr [AnselSDK64.dll+703D0] { ->AnselSDK64.setStopSessionCallback }
AnselSDK64.ansel::updateCamera+22- 48 8B CF              - mov rcx,rdi
AnselSDK64.ansel::updateCamera+25- FF D3                 - call rbx
AnselSDK64.ansel::updateCamera+27- 48 8B 5C 24 30        - mov rbx,[rsp+30]
AnselSDK64.ansel::updateCamera+2C- 48 83 C4 20           - add rsp,20 { 32 }
AnselSDK64.ansel::updateCamera+30- 5F                    - pop rdi
AnselSDK64.ansel::updateCamera+31- C3                    - ret 


// they're written first, before the UpdateCamera call..
// Disable writes after one time after camera is enabled so the current coords are written at the start, 
// and after that not written again. 
// We can do this relatively to RCX
WHGame.DLL+1F8A64C - F3 0F11 05 4C6F6F01   - movss [WHGame.DLL+36815A0],xmm0 { (729.46) }
WHGame.DLL+1F8A654 - F3 0F10 4E 04         - movss xmm1,[rsi+04]
WHGame.DLL+1F8A659 - F3 0F11 0D 436F6F01   - movss [WHGame.DLL+36815A4],xmm1 { (3425.57) }
WHGame.DLL+1F8A661 - 48 8D 98 E8000000     - lea rbx,[rax+000000E8]
WHGame.DLL+1F8A668 - F3 0F10 46 08         - movss xmm0,[rsi+08]
WHGame.DLL+1F8A66D - F3 0F11 05 336F6F01   - movss [WHGame.DLL+36815A8],xmm0 { (76.50) }
WHGame.DLL+1F8A675 - F3 0F10 4E 0C         - movss xmm1,[rsi+0C]
WHGame.DLL+1F8A67A - F3 0F11 0D 2A6F6F01   - movss [WHGame.DLL+36815AC],xmm1 { (-0.43) }
WHGame.DLL+1F8A682 - F3 0F10 46 10         - movss xmm0,[rsi+10]
WHGame.DLL+1F8A687 - F3 0F11 05 216F6F01   - movss [WHGame.DLL+36815B0],xmm0 { (-0.10) }
WHGame.DLL+1F8A68F - F3 0F10 4E 14         - movss xmm1,[rsi+14]
WHGame.DLL+1F8A694 - F3 0F11 0D 186F6F01   - movss [WHGame.DLL+36815B4],xmm1 { (0.21) }
WHGame.DLL+1F8A69C - F3 0F10 46 18         - movss xmm0,[rsi+18]
WHGame.DLL+1F8A6A1 - F3 0F11 05 0F6F6F01   - movss [WHGame.DLL+36815B8],xmm0 { (0.87) }
WHGame.DLL+1F8A6A9 - F3 0F10 4E 30         - movss xmm1,[rsi+30]
WHGame.DLL+1F8A6AE - F3 0F59 0D 52973A00   - mulss xmm1,[WHGame.DLL+2333E08] { (180.00) }
WHGame.DLL+1F8A6B6 - F3 0F5E 0D 72973A00   - divss xmm1,[WHGame.DLL+2333E30] { (3.14) }
WHGame.DLL+1F8A6BE - F3 0F11 0D F66E6F01   - movss [WHGame.DLL+36815BC],xmm1 { (65.00) }		<< NOP if our camera is enabled to have FOV 
WHGame.DLL+1F8A6C6 - F3 0F10 46 2C         - movss xmm0,[rsi+2C]
WHGame.DLL+1F8A6CB - F3 0F11 05 F56E6F01   - movss [WHGame.DLL+36815C8],xmm0 { (0.05) }
WHGame.DLL+1F8A6D3 - F3 0F10 4B 6C         - movss xmm1,[rbx+6C]
WHGame.DLL+1F8A6D8 - F3 0F11 0D EC6E6F01   - movss [WHGame.DLL+36815CC],xmm1 { (8000.00) }
WHGame.DLL+1F8A6E0 - F3 0F10 43 40         - movss xmm0,[rbx+40]
WHGame.DLL+1F8A6E5 - F3 0F10 0D E7266E01   - movss xmm1,[WHGame.DLL+366CDD4] { (0.00) }
WHGame.DLL+1F8A6ED - F3 0F11 05 DB6E6F01   - movss [WHGame.DLL+36815D0],xmm0 { (1.60) }
WHGame.DLL+1F8A6F5 - F3 0F10 05 DB266E01   - movss xmm0,[WHGame.DLL+366CDD8] { (0.00) }
WHGame.DLL+1F8A6FD - F3 0F11 05 BF6E6F01   - movss [WHGame.DLL+36815C4],xmm0 { (0.00) }
WHGame.DLL+1F8A705 - F3 0F11 0D B36E6F01   - movss [WHGame.DLL+36815C0],xmm1 { (0.00) }
WHGame.DLL+1F8A70D - FF 15 D5890200        - call qword ptr [WHGame.DLL+1FB30E8] { ->AnselSDK64.ansel::updateCamera }
WHGame.DLL+1F8A713 - F3 0F10 06            - movss xmm0,[rsi]

// ANsel clip check:
WHGame.DLL+1F8A86C - 48 8B 0D 0DA88F00     - mov rcx,[WHGame.DLL+2885080] { (7FFB3875D180) }
WHGame.DLL+1F8A873 - 48 8B 01              - mov rax,[rcx]
WHGame.DLL+1F8A876 - FF 90 90050000        - call qword ptr [rax+00000590]
WHGame.DLL+1F8A87C - 4C 8B C6              - mov r8,rsi
WHGame.DLL+1F8A87F - 48 8D 54 24 40        - lea rdx,[rsp+40]
WHGame.DLL+1F8A884 - E8 57900000           - call WHGame.DLL+1F938E0		<< NOP FOR NO CLIP.
WHGame.DLL+1F8A889 - 48 8B 5C 24 60        - mov rbx,[rsp+60]
WHGame.DLL+1F8A88E - 48 8B 74 24 68        - mov rsi,[rsp+68]
WHGame.DLL+1F8A893 - 48 83 C4 50           - add rsp,50 { 80 }
WHGame.DLL+1F8A897 - 5F                    - pop rdi

// Call update camera
WHGame.DLL+12EEBD3 - E8 7CAB47FF           - call WHGame.DLL+769754
WHGame.DLL+12EEBD8 - 48 8D 8B 08030000     - lea rcx,[rbx+00000308]
WHGame.DLL+12EEBDF - 48 8B D7              - mov rdx,rdi
WHGame.DLL+12EEBE2 - 48 8B 01              - mov rax,[rcx]
WHGame.DLL+12EEBE5 - FF 50 08              - call qword ptr [rax+08]			>> Call function which will call updateCamera
WHGame.DLL+12EEBE8 - 90                    - nop 
WHGame.DLL+12EEBE9 - E9 71AC47FF           - jmp WHGame.DLL+76985F
WHGame.DLL+12EEBEE - 48 8B 4B 08           - mov rcx,[rbx+08]
WHGame.DLL+12EEBF2 - 48 8B D7              - mov rdx,rdi
//... called by:
WHGame.DLL+791A09 - 48 8B D7              - mov rdx,rdi
WHGame.DLL+791A0C - 48 8B 48 38           - mov rcx,[rax+38]
WHGame.DLL+791A10 - E8 D37DFDFF           - call WHGame.DLL+7697E8	>> Call code above
WHGame.DLL+791A15 - 48 8D 4B C0           - lea rcx,[rbx-40]
WHGame.DLL+791A19 - E8 8ED4DAFF           - call WHGame.DLL+53EEAC
WHGame.DLL+791A1E - 48 85 C0              - test rax,rax
WHGame.DLL+791A21 - 75 0B                 - jne WHGame.DLL+791A2E
WHGame.DLL+791A23 - 48 8B 5C 24 30        - mov rbx,[rsp+30]
WHGame.DLL+791A28 - 48 83 C4 20           - add rsp,20 { 32 }

// Enable writing to all console commands:
WHGame.DLL+73A223 - 25 00000040           - and eax,40000000 { 2.00 }
WHGame.DLL+73A228 - 0F95 84 24 80000000   - setne byte ptr [rsp+00000080]
WHGame.DLL+73A230 - 80 BE DE010000 00     - cmp byte ptr [rsi+000001DE],00 { 0 }
WHGame.DLL+73A237 - 75 22                 - jne WHGame.DLL+73A25B			>> CHANGE TO JMP
WHGame.DLL+73A239 - 40 84 ED              - test bpl,bpl
WHGame.DLL+73A23C - 0F85 C464BA00         - jne WHGame.DLL+12E0706
WHGame.DLL+73A242 - 85 DB                 - test ebx,ebx
WHGame.DLL+73A244 - 0F85 BC64BA00         - jne WHGame.DLL+12E0706
WHGame.DLL+73A24A - 45 85 F6              - test r14d,r14d
WHGame.DLL+73A24D - 0F85 B364BA00         - jne WHGame.DLL+12E0706
WHGame.DLL+73A253 - 85 C0                 - test eax,eax
WHGame.DLL+73A255 - 0F85 AB64BA00         - jne WHGame.DLL+12E0706
WHGame.DLL+73A25B - 48 83 BE 58010000 00  - cmp qword ptr [rsi+00000158],00 { 0 }
WHGame.DLL+73A263 - 74 2F                 - je WHGame.DLL+73A294
WHGame.DLL+73A265 - 48 8B 86 50010000     - mov rax,[rsi+00000150]
WHGame.DLL+73A26C - 48 8B 00              - mov rax,[rax]

// useless camera hacks
WHGame.DLL+76982C - 88 87 B0000000        - mov [rdi+000000B0],al
WHGame.DLL+769832 - 88 53 1A              - mov [rbx+1A],dl
WHGame.DLL+769835 - E8 A6E4FFFF           - call WHGame.DLL+767CE0
WHGame.DLL+76983A - 38 53 28              - cmp [rbx+28],dl
WHGame.DLL+76983D - 0F85 8D53B800         - jne WHGame.DLL+12EEBD0			>> ->JMP to move player and not camera in gameplay (not useful)
WHGame.DLL+769843 - 38 53 18              - cmp [rbx+18],dl
WHGame.DLL+769846 - 0F85 A253B800         - jne WHGame.DLL+12EEBEE			>> ->JMP to get 3rd person camera (not useful, no head!)
WHGame.DLL+76984C - 48 8D 53 2C           - lea rdx,[rbx+2C]
WHGame.DLL+769850 - 4C 8B C7              - mov r8,rdi
WHGame.DLL+769853 - 4C 8B 4B 10           - mov r9,[rbx+10]
WHGame.DLL+769857 - 48 8B CB              - mov rcx,rbx
WHGame.DLL+76985A - E8 89FDFFFF           - call WHGame.DLL+7695E8
WHGame.DLL+76985F - 48 8B 9C 24 10010000  - mov rbx,[rsp+00000110]
WHGame.DLL+769867 - 48 81 C4 00010000     - add rsp,00000100 { 256 }


// Real camera
// coords write: 
WHGame.DLL+92C254 - F3 44 0F11 5E 14      - movss [rsi+14],xmm11
WHGame.DLL+92C25A - F3 44 0F11 46 18      - movss [rsi+18],xmm8
WHGame.DLL+92C260 - 8B 44 24 38           - mov eax,[rsp+38]
WHGame.DLL+92C264 - F2 0F11 06            - movsd [rsi],xmm0			// Write X & Y
WHGame.DLL+92C268 - 89 46 08              - mov [rsi+08],eax			// Write Z
WHGame.DLL+92C26B - C6 46 34 00           - mov byte ptr [rsi+34],00 { 0 }
WHGame.DLL+92C26F - 44 0F28 74 24 70      - movaps xmm14,[rsp+70]
WHGame.DLL+92C275 - 4C 8D 9C 24 00010000  - lea r11,[rsp+00000100]
// Write 2
WHGame.DLL+92C900 - F3 44 0F11 5A 14      - movss [rdx+14],xmm11
WHGame.DLL+92C906 - F3 44 0F11 7A 18      - movss [rdx+18],xmm15
WHGame.DLL+92C90C - F2 0F11 02            - movsd [rdx],xmm0			// X & Y
WHGame.DLL+92C910 - 89 42 08              - mov [rdx+08],eax			// Z
WHGame.DLL+92C913 - F3 44 0F11 4C 24 44   - movss [rsp+44],xmm9
WHGame.DLL+92C91A - F3 44 0F11 5C 24 48   - movss [rsp+48],xmm11
WHGame.DLL+92C921 - F3 44 0F11 7C 24 4C   - movss [rsp+4C],xmm15
// Write 3
WHGame.DLL+766B68 - 0F28 C2               - movaps xmm0,xmm2
WHGame.DLL+766B6B - 0F14 C1               - unpcklps xmm0,xmm1
WHGame.DLL+766B6E - F2 0F11 06            - movsd [rsi],xmm0			// X & Y
WHGame.DLL+766B72 - 89 46 08              - mov [rsi+08],eax
WHGame.DLL+766B75 - 4D 85 F6              - test r14,r14
WHGame.DLL+766B78 - 74 1F                 - je WHGame.DLL+766B99
WHGame.DLL+766B7A - 49 8B 7E 40           - mov rdi,[r14+40]
WHGame.DLL+766B7E - 48 85 FF              - test rdi,rdi
// Write 4
WHGame.DLL+767AD8 - 8B 45 AF              - mov eax,[rbp-51]
WHGame.DLL+767ADB - 0F14 C1               - unpcklps xmm0,xmm1
WHGame.DLL+767ADE - F2 0F11 03            - movsd [rbx],xmm0			// X & Y
WHGame.DLL+767AE2 - 89 43 08              - mov [rbx+08],eax			// Z
WHGame.DLL+767AE5 - F3 0F10 93 9C000000   - movss xmm2,[rbx+0000009C]
WHGame.DLL+767AED - F3 0F59 53 0C         - mulss xmm2,[rbx+0C]
WHGame.DLL+767AF2 - F3 0F10 43 10         - movss xmm0,[rbx+10]
WHGame.DLL+767AF7 - F3 0F59 83 A0000000   - mulss xmm0,[rbx+000000A0]
// Write 5
// It's unstable (writes to many addresses) when gameplay is on, but in a cutscene it's writing to just 1 address: the cutscene camera.
// As this copies the whole struct, what we could do is when the camera is enabled, simply store our struct's address in the register and write
// the values from our own struct (coords, quaternion, fov), otherwise proceed as normal. 
// This also saves us from blocking writes all over the place. 
// What's needed next is timestop. This could be found with the startsession in ansel.
WHGame.DLL+767640 - F2 0F10 02            - movsd xmm0,[rdx]
WHGame.DLL+767644 - F2 0F11 01            - movsd [rcx],xmm0			// Write X & Y
WHGame.DLL+767648 - 8B 42 08              - mov eax,[rdx+08]
WHGame.DLL+76764B - 89 41 08              - mov [rcx+08],eax			// Write Z
WHGame.DLL+76764E - 8B 42 0C              - mov eax,[rdx+0C]
WHGame.DLL+767651 - 89 41 0C              - mov [rcx+0C],eax
WHGame.DLL+767654 - 8B 42 10              - mov eax,[rdx+10]
WHGame.DLL+767657 - 89 41 10              - mov [rcx+10],eax
WHGame.DLL+76765A - 8B 42 14              - mov eax,[rdx+14]
WHGame.DLL+76765D - 89 41 14              - mov [rcx+14],eax
WHGame.DLL+767660 - 8B 42 18              - mov eax,[rdx+18]
WHGame.DLL+767663 - 89 41 18              - mov [rcx+18],eax
WHGame.DLL+767666 - 8B 42 1C              - mov eax,[rdx+1C]
WHGame.DLL+767669 - 89 41 1C              - mov [rcx+1C],eax
WHGame.DLL+76766C - 8B 42 20              - mov eax,[rdx+20]

// Timestop1. Pauses everything.
WHGame.DLL+4175E4 - 80 79 60 00           - cmp byte ptr [rcx+60],00 { 0 }
WHGame.DLL+4175E8 - 74 14                 - je WHGame.DLL+4175FE
WHGame.DLL+4175EA - 83 FA 01              - cmp edx,01 { 1 }
WHGame.DLL+4175ED - 74 13                 - je WHGame.DLL+417602
WHGame.DLL+4175EF - 85 D2                 - test edx,edx
WHGame.DLL+4175F1 - 75 05                 - jne WHGame.DLL+4175F8
WHGame.DLL+4175F3 - 38 51 54              - cmp [rcx+54],dl						<< READ of timestop1.
WHGame.DLL+4175F6 - 75 06                 - jne WHGame.DLL+4175FE
WHGame.DLL+4175F8 - F3 0F10 41 48         - movss xmm0,[rcx+48]
WHGame.DLL+4175FD - C3                    - ret 
WHGame.DLL+4175FE - 0F57 C0               - xorps xmm0,xmm0
WHGame.DLL+417601 - C3                    - ret 
WHGame.DLL+417602 - F3 0F10 41 4C         - movss xmm0,[rcx+4C]
WHGame.DLL+417607 - C3                    - ret 

// Timestop2. Pauses animations of characters, not animations of trees/vegetation
WHGame.DLL+76E164 - 48 8D 41 08           - lea rax,[rcx+08]
WHGame.DLL+76E168 - 48 8D 48 2C           - lea rcx,[rax+2C]
WHGame.DLL+76E16C - 48 3B C1              - cmp rax,rcx
WHGame.DLL+76E16F - 74 0B                 - je WHGame.DLL+76E17C
WHGame.DLL+76E171 - 83 38 00              - cmp dword ptr [rax],00 { 0 }		<< READ of timestop2
WHGame.DLL+76E174 - 7F 09                 - jg WHGame.DLL+76E17F
WHGame.DLL+76E176 - 48 83 C0 04           - add rax,04 { 4 }
WHGame.DLL+76E17A - EB F0                 - jmp WHGame.DLL+76E16C
WHGame.DLL+76E17C - 32 C0                 - xor al,al
WHGame.DLL+76E17E - C3                    - ret 
WHGame.DLL+76E17F - B0 01                 - mov al,01 { 1 }
WHGame.DLL+76E181 - C3                    - ret 

// Cutscene timestop:
WHGame.DLL+57A6 - 83 BB 48070000 01     - cmp dword ptr [rbx+00000748],01 { 1 }
WHGame.DLL+57AD - 75 10                 - jne WHGame.DLL+57BF
WHGame.DLL+57AF - 83 BB A0040000 00     - cmp dword ptr [rbx+000004A0],00 { 0 }		<< READ of timestop
WHGame.DLL+57B6 - 75 07                 - jne WHGame.DLL+57BF
WHGame.DLL+57B8 - 48 FF 83 60070000     - inc [rbx+00000760]
WHGame.DLL+57BF - 48 8B 4B 08           - mov rcx,[rbx+08]
WHGame.DLL+57C3 - 8B BB 80000000        - mov edi,[rbx+00000080]
WHGame.DLL+57C9 - 48 8D 53 1C           - lea rdx,[rbx+1C]
WHGame.DLL+57CD - E8 EE670000           - call WHGame.DLL+BFC0
WHGame.DLL+57D2 - 4C 8B 5B 08           - mov r11,[rbx+08]
WHGame.DLL+57D6 - 41 83 BB 30090000 00  - cmp dword ptr [r11+00000930],00 { 0 }
WHGame.DLL+57DE - 76 7E                 - jna WHGame.DLL+585E
//or
WHGame.DLL+6040 - 40 53                 - push rbx
WHGame.DLL+6042 - 55                    - push rbp
WHGame.DLL+6043 - 57                    - push rdi
WHGame.DLL+6044 - 48 81 EC 10010000     - sub rsp,00000110 { 272 }
WHGame.DLL+604B - 33 DB                 - xor ebx,ebx
WHGame.DLL+604D - 8B EA                 - mov ebp,edx
WHGame.DLL+604F - 48 8B F9              - mov rdi,rcx
WHGame.DLL+6052 - 41 89 18              - mov [r8],ebx
WHGame.DLL+6055 - 83 B9 A0040000 01     - cmp dword ptr [rcx+000004A0],01 { 1 }		<< READ of timestop
WHGame.DLL+605C - 75 0D                 - jne WHGame.DLL+606B
WHGame.DLL+605E - 33 C0                 - xor eax,eax
WHGame.DLL+6060 - 48 81 C4 10010000     - add rsp,00000110 { 272 }
WHGame.DLL+6067 - 5F                    - pop rdi
WHGame.DLL+6068 - 5D                    - pop rbp
WHGame.DLL+6069 - 5B                    - pop rbx
WHGame.DLL+606A - C3                    - ret 
WHGame.DLL+606B - 83 B9 1C080000 01     - cmp dword ptr [rcx+0000081C],01 { 1 }
WHGame.DLL+6072 - 74 EA                 - je WHGame.DLL+605E

